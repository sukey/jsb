#!/usr/bin/env python
#
#

""" jsb tornado dispatch handler.  dispatches remote commands.  """

import warnings
warnings.simplefilter("ignore")

## bootstrap

import os, sys
sys.path.insert(0, os.getcwd())

from jsb.version import getversion

## command line parsing

from optparse import OptionParser
parser = OptionParser(usage='usage: %prog [options] <appid>', version='%prog ' + getversion())
parser.add_option('-o', '--owner', type='string', default=False, dest='owner',  help="owner of the bot")
parser.add_option('-d', '--datadir', type='string', default=False, dest='datadir', help="datadir to use")
parser.add_option('-l', '--loglevel', type='string', default=False, dest='loglevel', help="logging level")
parser.add_option('-p', '--port', type='string', default=False, dest='port', help="servers listening port")
parser.add_option('-f', '--fleet', action="store_true", default=False, dest='fleet', help="enable the fleet")
parser.add_option('', '--colors', action="store_true", default=False, dest='colors', help="enable the use of colors in logging")
parser.add_option('', '--ssl', action="store_true", default=False, dest='ssl', help="enable ssl on the server")
opts, args = parser.parse_args()
opts.args = args

print getversion('TORNADO')

if opts.datadir:
    if not os.path.isdir(opts.datadir): os.mkdir(opts.datadir)
    from jsb.lib.datadir import setdatadir
    setdatadir(opts.datadir)

from jsb.utils.log import setloglevel
setloglevel(opts.loglevel or "warn", opts.colors)

## boot

from jsb.lib.boot import boot
boot()

if opts.owner:
    from jsb.lib.users import users_boot
    u = users_boot()
    u.make_owner(opts.owner)

## jsb imports

from jsb.utils.generic import fromenc, toenc
from jsb.version import getversion
from jsb.utils.xmpp import stripped
from jsb.utils.url import getpostdata, useragent
from jsb.lib.plugins import plugs
from jsb.lib.persist import Persist
from jsb.utils.exception import handle_exception, exceptionmsg
from jsb.lib.fleet import fleet
from jsb.lib.errors import NoSuchCommand
from jsb.utils.lazydict import LazyDict
from jsb.lib.config import getmainconfig
from jsb.lib.fleet import getfleet
from jsb.lib.threads import start_new_thread
from jsb.drivers.tornado.bot import TornadoBot
from jsb.drivers.tornado.event import TornadoEvent
from jsb.lib.datadir import getdatadir
from jsb.imports import gettornado

tornado = gettornado()
fleet = getfleet()

## tornado import

import tornado.web
import tornado.ioloop
import tornado.auth
import tornado.httpserver
import tornado.websocket

## basic imports

import sys
import time
import types
import os
import logging
import urlparse
import urllib
import socket
import ssl

bot = TornadoBot(botname="tornado-bot")

if os.path.exists(os.getcwd() + os.sep + "jsb"): ddir = os.getcwd() + os.sep + "jsb" + os.sep + "data"
else: ddir = getdatadir()

## server part

class TornadoServer(tornado.httpserver.HTTPServer):

    def __init__(self, *args, **kwargs):
        tornado.httpserver.HTTPServer.__init__(self, *args, **kwargs)

    def _handle_events(self, *args, **kwargs):
        try:
            tornado.httpserver.HTTPServer._handle_events(self, *args, **kwargs)
        except Exception, ex: logging.error("error while handling events: %s" % str(ex))

## web socket

class WebSocket(tornado.websocket.WebSocketHandler):

    def get_current_user(self):
        return self.get_secure_cookie("user") or ("demouser" + "-" + self.request.remote_ip)

    def open(self):
        user = self.current_user or ("demouser" + "-" + self.request.remote_ip)
        if not bot.websockets.has_key(user): bot.websockets[user] = []
        if not self in bot.websockets[user]: bot.websockets[user].append(self)
        logging.warn("websocket open - %s" % user)

    def on_message(self, message):
        try:
            user = self.current_user
            if not user: return
            logging.warn("%s - %s - %s" % (user, message, self.request.remote_ip))
            event = TornadoEvent(bot=bot)
            event.parsesocket(self, message)
            bot.gatekeeper.allow(event.userhost)
            event.bind(bot)
            bot.doevent(event)
        except Exception, ex:
            handle_exception()
        logging.warn(message)

    def on_close(self):
        user = self.current_user
        if self in bot.websockets[user]: bot.websockets[user].remove(self)
        logging.warn("websocket closed")


## handlers

class GoogleHandler(tornado.web.RequestHandler, tornado.auth.GoogleMixin):

    @tornado.web.asynchronous
    def get(self):
        if self.get_argument("openid.mode", None):
            self.get_authenticated_user(self._on_auth)
            return
        self.authenticate_redirect()

    def _on_auth(self, user):
        logging.warn(str(user))
        if not user: self.authenticate_redirect() ; return
        self.set_secure_cookie("user", user['email'])
        self.redirect("/")

    post = get

class BaseHandler(tornado.web.RequestHandler):

    def get_current_user(self):
        user  = self.get_secure_cookie("user")
        if not user: user = "demouser" + "-" + self.request.remote_ip
        return user

class LoginHandler(GoogleHandler):

    def get(self):
        host = self.request.host
        t = {'appname': "JSONBOT", 'version': getversion(), 'who': "not logged in yet", 'host': host, 'color': "#C54848", "logouturl": 'logout', "loginurl": "login"}
        logging.warn(t)
        self.render(ddir + os.sep + "templates" + os.sep + "login.html", title="JSONBOT", **t)

class LogoutHandler(GoogleHandler):

    def get(self):
        self.clear_cookie("user")
        host = self.request.host
        t = {'appname': "JSONBOT", 'version': getversion(), 'who': "not logged in yet", 'host': host, 'color': "#C54848", "logouturl": 'logout', "loginurl": "login"}
        logging.warn(t)
        self.render(ddir + os.sep + "templates" + os.sep + "login.html", title="JSONBOT", **t)


class DispatchHandler(BaseHandler):

    """ the bots remote command dispatcher. """

    @tornado.web.authenticated
    def get(self):
        """ show basic page. """
        try:
            if not self.current_user:
                self.redirect("/login")
                return
            user = tornado.escape.xhtml_escape(self.current_user)
            if not user: self.redirect("/login") ; return
            host = self.request.host
            if user:
                t = {'appname': "JSONBOT", 'version': getversion(), 'who': user, 'host': host, 'color': "#C54848", "logouturl": 'logout', "loginurl": "login"}
                self.render(ddir + os.sep + "templates" + os.sep + "console.html", title="JSONBOT", **t)
        except Exception, ex:
            handle_exception()

class DemoHandler(BaseHandler):

    """ the bots remote command dispatcher. """

    def get(self):
        """ show basic page. """
        try:
            user = "demouser" + "-" + self.request.remote_ip
            host = self.request.host
            t = {'appname': "JSONBOT", 'version': getversion(), 'who': user, 'host': host, 'color': "#C54848", "logouturl": 'logout', "loginurl": "login"}
            self.render(ddir + os.sep + "templates" + os.sep + "console.html", title="JSONBOT", **t)
        except Exception, ex:
            handle_exception()

## the application 

settings = {
    "static_path": getdatadir() + os.sep + "static",
    "cookie_secret": "661oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=",
    "login_url": "/login",
}


application = tornado.web.Application([(r"/", DispatchHandler),
                                       (r"/demo", DemoHandler),
                                       (r'/login_required', GoogleHandler),
                                       (r"/login", LoginHandler),
                                       (r"/logout", LogoutHandler),
                                       (r"/websocket", WebSocket),
                                       (r"(/static/.*)", tornado.web.StaticFileHandler, dict(path=settings['static_path'])),], **settings)

ssl_options={
        "certfile": getdatadir() + os.sep + "jsb.crt",
        "keyfile": getdatadir() + os.sep + "jsb.key",
}

## runtime

if opts.ssl:
    logging.warn(ssl_options)
    server = TornadoServer(application, ssl_options=ssl_options)
else:
    server = TornadoServer(application)

def main():
    logging.warn("starting tornando server")
    global bot
    server.listen(opts.port or 10102)
    if opts.fleet:
        fleetbots = fleet.loadall(opts.args)
        start_new_thread(fleet.startall, (fleetbots, ))
        getfleet().addbot(bot)
    bot.ioloop.start()

if __name__ == "__main__":
    main()
