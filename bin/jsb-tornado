#!/usr/bin/env python
#
#

""" jsb tornado dispatch handler.  dispatches remote commands.  """

import warnings
warnings.simplefilter("ignore")

## bootstrap

import os, sys
sys.path.insert(0, os.getcwd())

from jsb.version import getversion

## command line parsing

from optparse import OptionParser
parser = OptionParser(usage='usage: %prog [options] <appid>', version='%prog ' + getversion())
parser.add_option('-o', '--owner', type='string', default=False, dest='owner',  help="owner of the bot")
parser.add_option('-d', '--datadir', type='string', default=False, dest='datadir', help="datadir to use")
parser.add_option('-l', '--loglevel', type='string', default=False, dest='loglevel', help="logging level")
parser.add_option('', '--colors', action="store_true", default=False, dest='colors', help="enable the use of colors")
opts, args = parser.parse_args()
opts.args = args

if not opts.args: print getversion('CONSOLE')
if opts.datadir:
    if not os.path.isdir(opts.datadir): os.mkdir(opts.datadir)
    from jsb.lib.datadir import setdatadir
    setdatadir(opts.datadir)

from jsb.utils.log import setloglevel
setloglevel(opts.loglevel or "warn", opts.colors)

## boot

from jsb.lib.boot import boot
boot()

if opts.owner:
    from jsb.lib.users import users_boot
    u = users_boot()
    u.make_owner(opts.owner)

## jsb imports

from jsb.utils.generic import fromenc, toenc
from jsb.version import getversion
from jsb.utils.xmpp import stripped
from jsb.utils.url import getpostdata, useragent
from jsb.lib.plugins import plugs
from jsb.lib.persist import Persist
from jsb.utils.exception import handle_exception, exceptionmsg
from jsb.lib.fleet import fleet
from jsb.lib.errors import NoSuchCommand
from jsb.utils.lazydict import LazyDict
from jsb.lib.config import getmainconfig
from jsb.drivers.tornado.bot import TornadoBot
from jsb.drivers.tornado.event import TornadoEvent

## tornado import

import tornado.web
import tornado.ioloop

## basic imports

import sys
import time
import types
import os
import logging

logging.warn(getversion('TORNADO'))

bot = TornadoBot(botname="tornado-bot")

#class GoogleHandler(tornado.web.RequestHandler, tornado.auth.GoogleMixin):
#    @tornado.web.asynchronous
#    def get(self):
#        if self.get_argument("openid.mode", None):
#            self.get_authenticated_user(self._on_auth)
#            return
#        self.authenticate_redirect()
#
#   def _on_auth(self, user):
#        if not user:
#            self.authenticate_redirect()
#            return
        # Save the user with, e.g., set_secure_cookie()

class BaseHandler(tornado.web.RequestHandler):
    def get_current_user(self):
        return self.get_secure_cookie("user")

class LoginHandler(BaseHandler):
    def get(self):
        self.write('<html><body><form action="/login" method="post">'
                   'Name: <input type="text" name="name">'
                   '<input type="submit" value="Sign in">'
                   '</form></body></html>')

    def post(self):
        self.set_secure_cookie("user", self.get_argument("name_") + self.request.remote_ip)
        self.redirect("/")


class Dispatch_Handler(BaseHandler):

    """ the bots remote command dispatcher. """

    @tornado.web.authenticated
    def get(self):
        """ show basic page. """
        try:
            if not self.current_user:
                self.redirect("/login")
                return
            user = tornado.escape.xhtml_escape(self.current_user)
            if user: user = user + "_" + self.request.remote_ip
            else: self.redirect("/login") ; return
            host = self.request.host
            if user:
                t = {'appname': "JSONBOT", 'version': getversion(), 'who': user, 'host': host, 'color': "#C54848", "logouturl": 'none"'}
                #logging.warn(t)
                self.render(os.getcwd() + os.sep + "templates/console.html", title="JSONBOT", **t)
        except Exception, ex:
            handle_exception()

    @tornado.web.authenticated
    def post(self):

        """ this is where the command get disaptched. """
        try:
            logging.warn("DISPATCH incoming: %s - %s" % (self.request.body, self.request.host))
            if not self.current_user: return
            event = TornadoEvent(bot=bot)
            event.parse(self, self.request)
            bot.gatekeeper.allow(event.userhost)
            event.bind(bot)
            bot.doevent(event)
        except NoSuchCommand:
            self.request.write("no such command: %s" % event.usercmnd)
        except Exception, ex:
            handle_exception()

## the application 

settings = {
    "static_path": os.getcwd() + os.sep + "static",
    "cookie_secret": "661oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=",
    "login_url": "/login",
}


application = tornado.web.Application([(r"/", Dispatch_Handler),
                                       (r"/login", LoginHandler),
                                       (r"(/static/.*)", tornado.web.StaticFileHandler, dict(path=settings['static_path'])),], **settings)

def main():
    application.listen(10102)
    instance = tornado.ioloop.IOLoop.instance()
    instance.start()

if __name__ == "__main__":
    main()
